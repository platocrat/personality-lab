name: Build and Push Docker Image to ECR, Pull on EC2

env:
  SSH_KEY: ${{ secrets.SSH_KEY }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
  # AWS environment variables
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
  # Auth0 environment variables
  AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
  AUTH0_BASE_URL: ${{ secrets.AUTH0_BASE_URL }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  AUTH0_ISSUER_BASE_URL: ${{ secrets.AUTH0_ISSUER_BASE_URL }}

on:
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'

      # Phase 0: Cache node modules
      - name: 0. Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Phase 1: Create `.env.local` file from Auth0 environment variables
      - name: 1. Extract Auth0 environment variables to create .env.local file
        run: '
          touch .env.local

          echo -e "AUTH0_SECRET=$AUTH0_SECRET\nAUTH0_BASE_URL=$AUTH0_BASE_URL\nAUTH0_ISSUER_BASE_URL=$AUTH0_ISSUER_BASE_URL\nAUTH0_CLIENT_ID=$AUTH0_CLIENT_ID\nAUTH0_CLIENT_SECRET=$AUTH0_CLIENT_SECRET" > .env.local
        '

      # Phase 2: Caching Docker layers to speed up the build
      - name: 2. Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
      
      # Phase 3: Set up Docker Buildx
      - name: 3. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Phase 4: Configure AWS credentials for ECR authentication
      - name: 4. Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Phase 5: Log in to Amazon ECR
      - name: 5. Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Phase 6: Build Docker image
      - name: 6. Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_NAME }}:latest .

      # Phase 7: Tag Docker image for ECR
      - name: 7. Tag Docker image
        run: |
          docker tag ${{ env.ECR_REPOSITORY_NAME }}:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:latest

      # Phase 8: Push Docker image to ECR
      - name: 8. Push Docker image to ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:latest

      # Phase 9: Create SSH key
      - name: 9. Create SSH key
        run: echo "$SSH_KEY" > ssh_key && chmod 600 ssh_key
      
      # Phase 10: SSH into EC2 instance and pull Docker image from ECR
      - name: 10. SSH into EC2 instance and pull Docker image
        run: ssh -o StrictHostKeyChecking=no -i ssh_key $EC2_USERNAME@$EC2_HOSTNAME '
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com &&
          docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:latest
          '