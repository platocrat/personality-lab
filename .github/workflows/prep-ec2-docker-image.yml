name: Prepare Docker Image for EC2

env:
  SSH_KEY: ${{ secrets.SSH_KEY }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_HUB_REPOSITORY: ${{ secrets.DOCKER_HUB_REPOSITORY }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  # Auth0 environment variables
  AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
  AUTH0_BASE_URL: ${{ secrets.AUTH0_BASE_URL }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  AUTH0_ISSUER_BASE_URL: ${{ secrets.AUTH0_ISSUER_BASE_URL }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      # Phase 0: Create `.env.local` file from Auth0 environment variables
      - name: 0. Extract Auth0 environment variables to create .env.local file
        run: '
          touch .env.local

          echo -e "AUTH0_SECRET=$AUTH0_SECRET\nAUTH0_BASE_URL=$AUTH0_BASE_URL\nAUTH0_ISSUER_BASE_URL=$AUTH0_ISSUER_BASE_URL\nAUTH0_CLIENT_ID=$AUTH0_CLIENT_ID\nAUTH0_CLIENT_SECRET=$AUTH0_CLIENT_SECRET" > .env.local
        '
      # Phase 1: Build and Push Docker Image to Docker Hub Repository
      - name: 1. Login to Docker
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_HUB_ACCESS_TOKEN
      - name: 2. Build the Docker image
        run: docker build -t personality-lab-app .
      - name: 3. Tag newly built image
        run: docker tag personality-lab-app $DOCKER_HUB_REPOSITORY
      - name: 4. Push Docker image to private repository
        run: docker push $DOCKER_HUB_REPOSITORY
      # Phase 2: Pull Docker image on EC2 instance and start NextJS app
      - name: 5. Create SSH key
        run: echo "$SSH_KEY" > ssh_key && chmod 600 ssh_key
      - name: 6. SSH into EC2 instance, prune Docker system data, and pull Docker image
        # sudo docker system prune -a -f && # No longer compatible with older Docker version
        run: ssh -o StrictHostKeyChecking=no -i ssh_key $EC2_USERNAME@$EC2_HOSTNAME '
          sudo docker system prune -a -f &&
          sudo docker pull platocrat/personality-lab-app
          '